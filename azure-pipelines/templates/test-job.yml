jobs:
- job: Test_Boost
  pool: 
    name: Azure Pipelines
    vmImage: $(VmImage)
  steps:
  - checkout: self
    submodules: true
  - task: PowerShell@2
    displayName: Fully cleanup the toolcache directory before testing
    inputs:
      targetType: filePath
      filePath: helpers/clean-toolcache.ps1
      arguments: -ToolName "boost"

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'current'
      artifact: 'boost-$(Version)-$(Platform)-$(Toolset)-$(Architecture)'
      path: $(Build.ArtifactStagingDirectory)

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/boost-$(Version)-$(Platform)-*-$(Architecture).*'
      destinationFolder: $(Build.BinariesDirectory)
      cleanDestinationFolder: false

  - task: PowerShell@2
    displayName: 'Apply build artifact to the local machines'
    inputs:
      targetType: inline
      script: |
        if ("$(Platform)" -match 'win32') { powershell ./setup.ps1 } else { sh ./setup.sh }
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: PowerShell@2
    displayName: 'Set up BOOST_ROOT'
    inputs:
      TargetType: inline
      script: |
        $BoostToolcachePath = Join-Path -Path $env:AGENT_TOOLSDIRECTORY -ChildPath "boost"
        $BoostToolcacheVersionPath = Join-Path -Path $BoostToolcachePath -ChildPath "$(Version)"
        $boostDirectory = Join-Path $BoostToolcacheVersionPath "$(Architecture)"
        $LD_LIBRARY = Join-Path -Path $boostDirectory -ChildPath "lib"
        Write-Host "BOOST_ROOT = ${boostDirectory}"
        Write-Host "##vso[task.setvariable variable=BOOST_ROOT]${boostDirectory}"
        Write-Host "##vso[task.setvariable variable=LD_LIBRARY_PATH]${LD_LIBRARY}"
        
  - task: PowerShell@2
    displayName: 'Run tests'
    inputs:
      TargetType: inline
      script: |
        Install-Module Pester -Force -Scope CurrentUser -RequiredVersion 4.10.1
        Import-Module Pester
        $Platform = If ("$(Platform)" -eq "win32") { "Windows" } else { "Nix" }
        $pesterParams = @(
          @{
            Path="./Common.Tests.ps1";
          },
          @{
            Path="./${Platform}.Tests.ps1";
            Parameters=@{
              Version="$(Version)";
              Platform="$(Platform)"
            }
          }
        )
        Invoke-Pester -Script $pesterParams -OutputFile "$(Build.SourcesDirectory)/tests/test_results.xml" -OutputFormat NUnitXml
      workingDirectory: '$(Build.SourcesDirectory)/tests'
  
  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      testResultsFiles: '*.xml'
      testResultsFormat: NUnit
      searchFolder: 'tests'
      failTaskOnFailedTests: true
      testRunTitle: "Boost $(Version)-$(Platform)-$(Toolset)"
    condition: always()
